FROM ghcr.io/astral-sh/uv:latest AS uv
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_INDEX=1 \
    UV_SYSTEM_PYTHON=1

WORKDIR /app

# (선택) 정말 필요한 경우에만 OS 패키지 설치
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     libxml2 libxslt1.1 \
#  && rm -rf /var/lib/apt/lists/*

COPY --from=uv /uv /usr/local/bin/uv

# 오프라인 휠 복사
# - WSL2는 일반적으로 linux/amd64 이므로 wheels/amd64 를 권장합니다.
# - 사전에 호스트에서 해당 디렉터리를 manylinux2014_x86_64 + cp311 휠로 채워두세요.
COPY wheels/amd64/ /opt/wheels/

# 프로젝트 메타/소스 복사 (개발 편의: -e . 설치)
COPY pyproject.toml /app/pyproject.toml
COPY src/ /app/src

# 빌드/설치 도구를 오프라인으로 설치 (uv pip 사용)
RUN uv pip install --system --no-index --find-links /opt/wheels setuptools wheel

# 프로젝트 및 모든 의존성 오프라인 설치 (editable)
# - build isolation을 끄면 이미 설치된 setuptools/wheel을 재사용하므로
#   오프라인 빌드 시 빌드 종속성 재해결 실패를 방지합니다.
RUN uv pip install --system --no-build-isolation --no-index --find-links /opt/wheels -e .

CMD ["sut-preprocess", "--help"]

# 빌드 (온라인 환경에서 실행)
#   docker build --platform linux/amd64 -f Dockerfile.wsl2 -t myproj-wsl2:1.0 .
# 저장/반출
#   docker save -o myproj_wsl2_1_0.tar myproj-wsl2:1.0
# 폐쇄망 로드
#   docker load -i sut-preprocess_wsl2_1_0.tar
#   확인: sut-preprocess --help
# 개발 모드(코드 반영)
#   docker run --rm -it -v "$PWD":/app -w /app myproj-wsl2:1.0 bash
